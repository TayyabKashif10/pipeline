# cloudbuild.yaml
steps:
# 1. Setup variables (substitute via Cloud Build substitutions or env)
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args:
  - -c
  - |
    set -e
    export PROJECT=$(gcloud config get-value project)
    echo "PROJECT=$PROJECT" > /workspace/envvars

# 2. Provision VMs and start workloads (this script will SSH or use startup scripts)
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args:
  - -c
  - |
    set -e
    bash scripts/provision_and_run.sh /workspace

# 3. Wait for runs to complete and copy results to GCS
- name: 'gcr.io/cloud-builders/gsutil'
  args: ['-m', 'cp', '-r', 'results/*', 'gs://$PROJECT-storage/']
  env:
  - 'CLOUDSDK_CORE_PROJECT=$PROJECT'

# 4. Run analysis script (generate graphs, CSVs)
- name: 'python:3.10'
  entrypoint: 'bash'
  args:
  - -c
  - |
    pip install google-cloud-monitoring pandas matplotlib
    python3 scripts/collect_metrics.py --out-dir results/metrics

# 5. Upload analysis to GCS
- name: 'gcr.io/cloud-builders/gsutil'
  args: ['-m', 'cp', '-r', 'results', 'gs://$PROJECT-storage/']
  env:
  - 'CLOUDSDK_CORE_PROJECT=$PROJECT'

# 6. Tear down resources
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args:
  - -c
  - |
    bash scripts/teardown.sh

timeout: '7200s'
